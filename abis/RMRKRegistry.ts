export const RMRKRegistry = [
  { inputs: [], name: 'CannotAddCollectionWithMintedTokens', type: 'error' },
  { inputs: [], name: 'CollectionAddressCannotBeZero', type: 'error' },
  { inputs: [], name: 'CollectionAlreadyExists', type: 'error' },
  { inputs: [], name: 'CollectionAlreadySponsored', type: 'error' },
  { inputs: [], name: 'CollectionAlreadyVerified', type: 'error' },
  {
    inputs: [{ internalType: 'address', name: 'collection', type: 'address' }],
    name: 'CollectionDoesNotExist',
    type: 'error',
  },
  { inputs: [], name: 'CollectionHasMintedTokens', type: 'error' },
  { inputs: [], name: 'CollectionMetadataNotAvailable', type: 'error' },
  { inputs: [], name: 'CollectionNotAllowedForIssuer', type: 'error' },
  { inputs: [], name: 'CollectionNotSponsored', type: 'error' },
  { inputs: [], name: 'CollectionNotSponsoredBySender', type: 'error' },
  { inputs: [], name: 'CollectionSymbolCannotBeEmpty', type: 'error' },
  { inputs: [], name: 'ContractNotPaused', type: 'error' },
  { inputs: [], name: 'ContractPaused', type: 'error' },
  { inputs: [], name: 'NotEnoughAllowance', type: 'error' },
  { inputs: [], name: 'NotEnoughBalance', type: 'error' },
  { inputs: [], name: 'NotFactory', type: 'error' },
  { inputs: [], name: 'OnlyCollectionOwnerCanAddCollection', type: 'error' },
  { inputs: [], name: 'OnlyCollectionOwnerCanRemoveCollection', type: 'error' },
  { inputs: [], name: 'RMRKNewContributorIsZeroAddress', type: 'error' },
  { inputs: [], name: 'RMRKNewOwnerIsZeroAddress', type: 'error' },
  { inputs: [], name: 'RMRKNotOwner', type: 'error' },
  { inputs: [], name: 'RMRKNotOwnerOrContributor', type: 'error' },
  { inputs: [], name: 'UnsupportedCollection', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'previousAdmin', type: 'address' },
      { indexed: false, internalType: 'address', name: 'newAdmin', type: 'address' },
    ],
    name: 'AdminChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'address', name: 'beacon', type: 'address' }],
    name: 'BeaconUpgraded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'collection', type: 'address' },
      { indexed: false, internalType: 'address', name: 'deployer', type: 'address' },
      { indexed: false, internalType: 'string', name: 'name', type: 'string' },
      { indexed: false, internalType: 'string', name: 'symbol', type: 'string' },
      { indexed: false, internalType: 'uint256', name: 'maxSupply', type: 'uint256' },
      { indexed: false, internalType: 'string', name: 'collectionMetadata', type: 'string' },
      {
        indexed: false,
        internalType: 'enum IRMRKRegistry.LegoCombination',
        name: 'legoCombination',
        type: 'uint8',
      },
      {
        indexed: false,
        internalType: 'enum IRMRKRegistry.MintingType',
        name: 'mintingType',
        type: 'uint8',
      },
      { indexed: false, internalType: 'bool', name: 'isSoulbound', type: 'bool' },
      {
        components: [
          { internalType: 'bool', name: 'usesOwnable', type: 'bool' },
          { internalType: 'bool', name: 'usesAccessControl', type: 'bool' },
          { internalType: 'bool', name: 'usesRMRKContributor', type: 'bool' },
          { internalType: 'bool', name: 'usesRMRKMintingUtils', type: 'bool' },
          { internalType: 'bool', name: 'usesRMRKLockable', type: 'bool' },
          { internalType: 'bool', name: 'hasStandardAssetManagement', type: 'bool' },
          { internalType: 'bool', name: 'hasStandardMinting', type: 'bool' },
          { internalType: 'bool', name: 'hasStandardNestMinting', type: 'bool' },
          { internalType: 'bool', name: 'autoAcceptsFirstAsset', type: 'bool' },
          { internalType: 'uint8', name: 'customLegoCombination', type: 'uint8' },
          { internalType: 'uint8', name: 'customMintingType', type: 'uint8' },
          { internalType: 'bytes32', name: 'adminRole', type: 'bytes32' },
        ],
        indexed: false,
        internalType: 'struct IRMRKRegistry.CollectionConfig',
        name: 'config',
        type: 'tuple',
      },
    ],
    name: 'CollectionAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'collection', type: 'address' }],
    name: 'CollectionBlacklisted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'collection', type: 'address' }],
    name: 'CollectionRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'collection', type: 'address' },
      { indexed: false, internalType: 'address', name: 'sponsor', type: 'address' },
    ],
    name: 'CollectionSponsored',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'collection', type: 'address' }],
    name: 'CollectionSponsorshipCancelled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'collection', type: 'address' }],
    name: 'CollectionUnverified',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'collection', type: 'address' }],
    name: 'CollectionVerified',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'contributor', type: 'address' },
      { indexed: false, internalType: 'bool', name: 'isContributor', type: 'bool' },
    ],
    name: 'ContributorUpdate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'uint8', name: 'version', type: 'uint8' }],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address' },
      { indexed: true, internalType: 'address', name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'bool', name: 'pauseState', type: 'bool' },
      { indexed: false, internalType: 'address', name: 'account', type: 'address' },
    ],
    name: 'Paused',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'address', name: 'implementation', type: 'address' }],
    name: 'Upgraded',
    type: 'event',
  },
  {
    inputs: [],
    name: 'CUSTOM_MINTING_TYPE_FOR_EXTERNAL_COLLECTIONS',
    outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'collection', type: 'address' },
      { internalType: 'address', name: 'deployer', type: 'address' },
      { internalType: 'uint256', name: 'maxSupply', type: 'uint256' },
      {
        internalType: 'enum IRMRKRegistry.LegoCombination',
        name: 'legoCombination',
        type: 'uint8',
      },
      { internalType: 'enum IRMRKRegistry.MintingType', name: 'mintingType', type: 'uint8' },
      { internalType: 'bool', name: 'isSoulbound', type: 'bool' },
      {
        components: [
          { internalType: 'bool', name: 'usesOwnable', type: 'bool' },
          { internalType: 'bool', name: 'usesAccessControl', type: 'bool' },
          { internalType: 'bool', name: 'usesRMRKContributor', type: 'bool' },
          { internalType: 'bool', name: 'usesRMRKMintingUtils', type: 'bool' },
          { internalType: 'bool', name: 'usesRMRKLockable', type: 'bool' },
          { internalType: 'bool', name: 'hasStandardAssetManagement', type: 'bool' },
          { internalType: 'bool', name: 'hasStandardMinting', type: 'bool' },
          { internalType: 'bool', name: 'hasStandardNestMinting', type: 'bool' },
          { internalType: 'bool', name: 'autoAcceptsFirstAsset', type: 'bool' },
          { internalType: 'uint8', name: 'customLegoCombination', type: 'uint8' },
          { internalType: 'uint8', name: 'customMintingType', type: 'uint8' },
          { internalType: 'bytes32', name: 'adminRole', type: 'bytes32' },
        ],
        internalType: 'struct IRMRKRegistry.CollectionConfig',
        name: 'config',
        type: 'tuple',
      },
      { internalType: 'string', name: 'collectionMetadata', type: 'string' },
    ],
    name: 'addCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'collection', type: 'address' },
      { internalType: 'address', name: 'deployer', type: 'address' },
      { internalType: 'uint256', name: 'maxSupply', type: 'uint256' },
      {
        internalType: 'enum IRMRKRegistry.LegoCombination',
        name: 'legoCombination',
        type: 'uint8',
      },
      { internalType: 'enum IRMRKRegistry.MintingType', name: 'mintingType', type: 'uint8' },
      { internalType: 'bool', name: 'isSoulbound', type: 'bool' },
    ],
    name: 'addCollectionFromFactories',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'collection', type: 'address' },
      { internalType: 'string', name: 'collectionMetadata', type: 'string' },
    ],
    name: 'addExternalCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'factory', type: 'address' }],
    name: 'addFactory',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'blackListCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'cancelSponsorship',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'collectionVerificationFee',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'declineVerification',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'factories',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'factoryList',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'forceRemoveCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],
    name: 'getCollectionAddressByIndex',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'getCollectionByAddress',
    outputs: [
      {
        components: [
          { internalType: 'address', name: 'collection', type: 'address' },
          { internalType: 'address', name: 'verificationSponsor', type: 'address' },
          { internalType: 'uint256', name: 'verificationFeeBalance', type: 'uint256' },
          {
            internalType: 'enum IRMRKRegistry.LegoCombination',
            name: 'legoCombination',
            type: 'uint8',
          },
          { internalType: 'enum IRMRKRegistry.MintingType', name: 'mintingType', type: 'uint8' },
          { internalType: 'bool', name: 'isSoulbound', type: 'bool' },
          { internalType: 'bool', name: 'visible', type: 'bool' },
          { internalType: 'bool', name: 'verified', type: 'bool' },
          {
            components: [
              { internalType: 'bool', name: 'usesOwnable', type: 'bool' },
              { internalType: 'bool', name: 'usesAccessControl', type: 'bool' },
              { internalType: 'bool', name: 'usesRMRKContributor', type: 'bool' },
              { internalType: 'bool', name: 'usesRMRKMintingUtils', type: 'bool' },
              { internalType: 'bool', name: 'usesRMRKLockable', type: 'bool' },
              { internalType: 'bool', name: 'hasStandardAssetManagement', type: 'bool' },
              { internalType: 'bool', name: 'hasStandardMinting', type: 'bool' },
              { internalType: 'bool', name: 'hasStandardNestMinting', type: 'bool' },
              { internalType: 'bool', name: 'autoAcceptsFirstAsset', type: 'bool' },
              { internalType: 'uint8', name: 'customLegoCombination', type: 'uint8' },
              { internalType: 'uint8', name: 'customMintingType', type: 'uint8' },
              { internalType: 'bytes32', name: 'adminRole', type: 'bytes32' },
            ],
            internalType: 'struct IRMRKRegistry.CollectionConfig',
            name: 'config',
            type: 'tuple',
          },
        ],
        internalType: 'struct IRMRKRegistry.Collection',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'index', type: 'uint256' }],
    name: 'getCollectionByIndex',
    outputs: [
      {
        components: [
          { internalType: 'address', name: 'collection', type: 'address' },
          { internalType: 'address', name: 'verificationSponsor', type: 'address' },
          { internalType: 'uint256', name: 'verificationFeeBalance', type: 'uint256' },
          {
            internalType: 'enum IRMRKRegistry.LegoCombination',
            name: 'legoCombination',
            type: 'uint8',
          },
          { internalType: 'enum IRMRKRegistry.MintingType', name: 'mintingType', type: 'uint8' },
          { internalType: 'bool', name: 'isSoulbound', type: 'bool' },
          { internalType: 'bool', name: 'visible', type: 'bool' },
          { internalType: 'bool', name: 'verified', type: 'bool' },
          {
            components: [
              { internalType: 'bool', name: 'usesOwnable', type: 'bool' },
              { internalType: 'bool', name: 'usesAccessControl', type: 'bool' },
              { internalType: 'bool', name: 'usesRMRKContributor', type: 'bool' },
              { internalType: 'bool', name: 'usesRMRKMintingUtils', type: 'bool' },
              { internalType: 'bool', name: 'usesRMRKLockable', type: 'bool' },
              { internalType: 'bool', name: 'hasStandardAssetManagement', type: 'bool' },
              { internalType: 'bool', name: 'hasStandardMinting', type: 'bool' },
              { internalType: 'bool', name: 'hasStandardNestMinting', type: 'bool' },
              { internalType: 'bool', name: 'autoAcceptsFirstAsset', type: 'bool' },
              { internalType: 'uint8', name: 'customLegoCombination', type: 'uint8' },
              { internalType: 'uint8', name: 'customMintingType', type: 'uint8' },
              { internalType: 'bytes32', name: 'adminRole', type: 'bytes32' },
            ],
            internalType: 'struct IRMRKRegistry.CollectionConfig',
            name: 'config',
            type: 'tuple',
          },
        ],
        internalType: 'struct IRMRKRegistry.Collection',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCollectionVerificationFee',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMetaFactoryAddress',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getRmrkTokenAddress',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTotalCollectionCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'rmrkToken_', type: 'address' },
      { internalType: 'uint256', name: 'collectionVerificationFee_', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'issuer', type: 'address' },
      { internalType: 'string', name: 'collectionSymbol', type: 'string' },
    ],
    name: 'isCollectionAllowedForIssuer',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collection', type: 'address' }],
    name: 'isCollectionInRegistry',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'contributor', type: 'address' }],
    name: 'isContributor',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isProduction',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'contributor', type: 'address' },
      { internalType: 'bool', name: 'grantRole', type: 'bool' },
    ],
    name: 'manageContributor',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bool', name: 'pause', type: 'bool' }],
    name: 'pauseRegistry',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'paused',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'removeCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'factory', type: 'address' },
      { internalType: 'uint256', name: 'factoryIndex', type: 'uint256' },
    ],
    name: 'removeFactory',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'rmrkToken',
    outputs: [{ internalType: 'contract IERC20', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'issuer', type: 'address' },
      { internalType: 'string', name: 'collectionSymbol', type: 'string' },
      { internalType: 'bool', name: 'allowed', type: 'bool' },
    ],
    name: 'setCollectionAllowedPerIssuer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'metaFactory', type: 'address' }],
    name: 'setMetaFactory',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'bool', name: 'isProduction_', type: 'bool' }],
    name: 'setProduction',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'sponsorVerification',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalCollectionsCounter',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'unblackListCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'unverifyCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: 'collectionVerificationFee_', type: 'uint256' }],
    name: 'updateCollectionVerificationFee',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'rmrkToken_', type: 'address' }],
    name: 'updateRMRKTokenAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newImplementation', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: 'newImplementation', type: 'address' },
      { internalType: 'bytes', name: 'data', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'collectionAddress', type: 'address' }],
    name: 'verifyCollection',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'to', type: 'address' }],
    name: 'withdrawFees',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;
